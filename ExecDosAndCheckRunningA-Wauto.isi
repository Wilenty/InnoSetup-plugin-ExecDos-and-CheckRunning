[Files]
Source: "ExecDosAndCheckRunning.dll"; DestDir: "{tmp}"; Flags: DontCopy IgnoreVersion;

[Code]
Function Wait4ProcessExitCode(const ProcessID: DWORD): DWORD;
  external 'Wait4ProcessExitCode@files:ExecDosAndCheckRunning.dll stdcall';

Function IsProcessExists(const ProcessID: DWORD): Boolean;
  external 'IsProcessExists@files:ExecDosAndCheckRunning.dll stdcall';

Function GetHWNdPID(const hWnd: HWND): DWORD;
  external 'GetHWNdPID@files:ExecDosAndCheckRunning.dll stdcall';

Function GetPIDhWND(const ProcessID: DWORD): HWND;
  external 'GetPIDhWND@files:ExecDosAndCheckRunning.dll stdcall';

Function CreateConsole(): Bool;
  external 'CreateConsole@files:ExecDosAndCheckRunning.dll stdcall';

Function SetConsoleBufferSize(SizeX, SizeY: SmallInt): Bool;
  external 'SetConsoleBufferSize@files:ExecDosAndCheckRunning.dll stdcall';

Const // ConsoleColors and ConsoleTextColors
  FOREGROUND_BLUE = $0001; // text color contains blue.
  FOREGROUND_GREEN = $0002; // text color contains green.
  FOREGROUND_RED = $0004; // text color contains red.
  FOREGROUND_INTENSITY = $0008; // text color is intensified.
  BACKGROUND_BLUE = $0010; // background color contains blue.
  BACKGROUND_GREEN = $0020; // background color contains green.
  BACKGROUND_RED = $0040; // background color contains red.
  BACKGROUND_INTENSITY = $0080; // background color is intensified.

  OldColor = $FF; // Use previous color for any of parameters (BackColor, TextColor), in functions ConsoleColors and ConsoleTextColors.

  TextBlack   = 0;
  TextMaroon  = FOREGROUND_RED;
  TextGreen   = FOREGROUND_GREEN;
  TextNavy    = FOREGROUND_BLUE;
  TextTeal    = FOREGROUND_GREEN or FOREGROUND_BLUE;
  TextOlive   = FOREGROUND_RED or FOREGROUND_GREEN;
  TextPurple  = FOREGROUND_RED or FOREGROUND_BLUE;
  TextGray    = FOREGROUND_RED or FOREGROUND_GREEN or FOREGROUND_BLUE;
  TextSilver  = FOREGROUND_INTENSITY;
  TextRed     = FOREGROUND_INTENSITY or FOREGROUND_RED;
  TextLime    = FOREGROUND_INTENSITY or FOREGROUND_GREEN;
  TextBlue    = FOREGROUND_INTENSITY or FOREGROUND_BLUE;
  TextAqua    = FOREGROUND_INTENSITY or FOREGROUND_GREEN or FOREGROUND_BLUE;
  TextYellow  = FOREGROUND_INTENSITY or FOREGROUND_RED or FOREGROUND_GREEN;
  TextFuchsia = FOREGROUND_INTENSITY or FOREGROUND_RED or FOREGROUND_BLUE;
  TextWhite   = FOREGROUND_INTENSITY or FOREGROUND_RED or FOREGROUND_GREEN or FOREGROUND_BLUE;

  BackBlack   = 0;
  BackMaroon  = BACKGROUND_RED;
  BackGreen   = BACKGROUND_GREEN;
  BackNavy    = BACKGROUND_BLUE;
  BackTeal    = BACKGROUND_GREEN or BACKGROUND_BLUE;
  BackOlive   = BACKGROUND_RED or BACKGROUND_GREEN;
  BackPurple  = BACKGROUND_RED or BACKGROUND_BLUE;
  BackGray    = BACKGROUND_RED or BACKGROUND_GREEN or BACKGROUND_BLUE;
  BackSilver  = BACKGROUND_INTENSITY;
  BackRed     = BACKGROUND_INTENSITY or BACKGROUND_RED;
  BackLime    = BACKGROUND_INTENSITY or BACKGROUND_GREEN;
  BackBlue    = BACKGROUND_INTENSITY or BACKGROUND_BLUE;
  BackAqua    = BACKGROUND_INTENSITY or BACKGROUND_GREEN or BACKGROUND_BLUE;
  BackYellow  = BACKGROUND_INTENSITY or BACKGROUND_RED or BACKGROUND_GREEN;
  BackFuchsia = BACKGROUND_INTENSITY or BACKGROUND_RED or BACKGROUND_BLUE;
  BackWhite   = BACKGROUND_INTENSITY or BACKGROUND_RED or BACKGROUND_GREEN or BACKGROUND_BLUE;

Function SetConsoleColors(BackColor, TextColor: Word): Bool;
  external 'SetConsoleColors@files:ExecDosAndCheckRunning.dll stdcall';

Function SetConsoleTextColors(BackColor, TextColor: Word): Bool;
  external 'SetConsoleTextColors@files:ExecDosAndCheckRunning.dll stdcall';

Function ClearConsole(): Bool;
  external 'ClearConsole@files:ExecDosAndCheckRunning.dll stdcall';

Function DestroyConsole(): Bool;
  external 'DestroyConsole@files:ExecDosAndCheckRunning.dll stdcall';

// this part of [code] was taken from there:
// https://stackoverflow.com/a/32266687
Type
  TMsg = record
    hwnd: HWND;
    message: UINT;
    wParam: LongInt;
    lParam: LongInt;
    time: DWORD;
    pt: TPoint;
  end;
// ^_^

#If Defined Unicode
type
  TExecOutCallBack = procedure(const OutputW: WideString);

Function IsModuleLoaded(const ModuleNameOrFullPathW: WideString): Boolean;
  external 'IsModuleLoadedW@files:ExecDosAndCheckRunning.dll stdcall';

Function IsProgramRunning(const FileNameOrFullPathW: WideString): Boolean;
  external 'IsProgramRunningW@files:ExecDosAndCheckRunning.dll stdcall';

Function ExecDosA2W(const FileNameOrFullPathA, CommandLineA, WorkingDirectoryA: PAnsiChar; const ShowWindow: Integer; ExecOutCallBackW: TExecOutCallBack; const Wait: Boolean): DWORD;
  external 'ExecDosA2W@files:ExecDosAndCheckRunning.dll stdcall';

Function ExecDos(const FileNameOrFullPathW, CommandLineW, WorkingDirectoryW: WideString; const ShowWindow: Integer; ExecOutCallBackW: TExecOutCallBack; const Wait: Boolean): DWORD;
  external 'ExecDosW@files:ExecDosAndCheckRunning.dll stdcall';
Function DosWriteInput(const InputW: WideString): Boolean;
  external 'DosWriteInputW@files:ExecDosAndCheckRunning.dll stdcall';

Function GetPIDpath(const ProcessID: DWORD): WideString;
  external 'GetPIDpathW@files:ExecDosAndCheckRunning.dll stdcall';

Function GetProgramInfo(const FileNameOrFullPathW: WideString; out ProcessID: DWORD): WideString;
  external 'GetProgramInfoW@files:ExecDosAndCheckRunning.dll stdcall';

Function GetModuleInfo(const ModuleNameOrFullPathW: WideString; out IsLoaded: DWORD): WideString;
  external 'GetModuleInfoW@files:ExecDosAndCheckRunning.dll stdcall';

Function SetConsoleTitle(const TitleW: WideString): Bool;
  external 'SetConsoleTitleW@files:ExecDosAndCheckRunning.dll stdcall';

Function WriteConsole(const InputW: WideString): Bool;
  external 'WriteConsoleW@files:ExecDosAndCheckRunning.dll stdcall';

Function ConsoleWriteLine(const InputW: WideString): Bool;
  begin
    Result := WriteConsole(InputW + #13#10);
end;

// this part of [code] was taken from there:
// https://stackoverflow.com/a/32266687
function PeekMessage(var lpMsg: TMsg; hWnd: HWND; wMsgFilterMin, wMsgFilterMax, wRemoveMsg: UINT): BOOL;
  external 'PeekMessageW@user32.dll stdcall';

function DispatchMessage(const lpMsg: TMsg): LongInt;
  external 'DispatchMessageW@user32.dll stdcall';
// ^_^
#Else
type
  TExecOutCallBack = procedure(const OutputA: PAnsiChar);

Function IsModuleLoaded(const ModuleNameOrFullPathA: PAnsiChar): Boolean;
  external 'IsModuleLoadedA@files:ExecDosAndCheckRunning.dll stdcall';

Function IsProgramRunning(const FileNameOrFullPathA: PAnsiChar): Boolean;
  external 'IsProgramRunningA@files:ExecDosAndCheckRunning.dll stdcall';

Function ExecDos(const FileNameOrFullPathA, CommandLineA, WorkingDirectoryA: PAnsiChar; const ShowWindow: Integer; ExecOutCallBackA: TExecOutCallBack; const Wait: Boolean): DWORD;
  external 'ExecDosA@files:ExecDosAndCheckRunning.dll stdcall';
Function DosWriteInput(const InputA: PAnsiChar): Boolean;
  external 'DosWriteInputA@files:ExecDosAndCheckRunning.dll stdcall';

Function GetPIDpath(const ProcessID: DWORD): PAnsiChar;
  external 'GetPIDpathA@files:ExecDosAndCheckRunning.dll stdcall';

Function GetProgramInfo(const FileNameOrFullPathA: PAnsiChar; out ProcessID: DWORD): PAnsiChar;
  external 'GetProgramInfoA@files:ExecDosAndCheckRunning.dll stdcall';

Function GetModuleInfo(const ModuleNameOrFullPathA: PAnsiChar; out IsLoaded: DWORD): PAnsiChar;
  external 'GetModuleInfoA@files:ExecDosAndCheckRunning.dll stdcall';

Function SetConsoleTitle(const TitleA: PAnsiChar): Bool;
  external 'SetConsoleTitleA@files:ExecDosAndCheckRunning.dll stdcall';

Function WriteConsole(const InputA: PAnsiChar): Bool;
  external 'WriteConsoleA@files:ExecDosAndCheckRunning.dll stdcall';

Function ConsoleWriteLine(const InputA: PAnsiChar): Bool;
  begin
    Result := WriteConsole(InputA + #13#10);
end;

// this part of [code] was taken from there:
// https://stackoverflow.com/a/32266687
function PeekMessage(var lpMsg: TMsg; hWnd: HWND; wMsgFilterMin, wMsgFilterMax, wRemoveMsg: UINT): BOOL;
  external 'PeekMessageA@user32.dll stdcall';

function DispatchMessage(const lpMsg: TMsg): LongInt;
  external 'DispatchMessageA@user32.dll stdcall';
// ^_^
#EndIf

// this part of [code] was taken from there:
// https://stackoverflow.com/a/32266687
function TranslateMessage(const lpMsg: TMsg): BOOL;
  external 'TranslateMessage@user32.dll stdcall';

const
  PM_REMOVE = 1;

procedure AppProcessMessages();
  var
    Msg: TMsg;
  begin
    while PeekMessage(Msg, 0, 0, 0, PM_REMOVE) do
    begin
      TranslateMessage(Msg);
      DispatchMessage(Msg);
    end;
end;
// ^_^
